use crate::app::{App, AppEntry, Focus};
use crate::ui::layout;
use crate::config::{LauncherConfig, SearchPosition};
use ratatui::Frame;

/// Draw the dual-pane view with Recent as a category
pub fn draw(f: &mut Frame, app: &mut App, search_position: SearchPosition, config: &LauncherConfig) {
    let (search_area, content_area) = layout::vertical_split(f, 3, search_position);

    layout::render_search_bar(
        f,
        search_area,
        &app.search_query,
        app.focus,
        config,
    );

    let (categories_area, apps_area) = layout::horizontal_split(content_area);

    let query_lower = app.search_query.to_lowercase();

    // Determine selected category based on search
    let selected_category_name = if !query_lower.is_empty() {
        app.apps.iter()
            .filter_map(|a| app.matches_search(&a.name, &query_lower).map(|score| (a, score)))
            .max_by_key(|(_, score)| *score)
            .map(|(a, _)| a.category.clone())
            // fallback to current selection
            .unwrap_or_else(|| app.categories.get(app.selected_category).cloned().unwrap_or_default())
    } else {
        app.categories.get(app.selected_category).cloned().unwrap_or_default()
    };

    // Always update selected_category to match the search result
    if let Some(idx) = app.categories.iter().position(|c| c == &selected_category_name) {
        app.selected_category = idx;
    }

    // Filter apps to display based on category (dual-pane)
    let mut apps_to_show: Vec<(AppEntry, i64)> = app.apps
        .iter()
        .filter(|a| a.category == selected_category_name)
        .filter_map(|a| app.matches_search(&a.name, &query_lower).map(|score| (a.clone(), score)))
        .collect();

    // Sort by fuzzy score
    apps_to_show.sort_by(|a, b| b.1.cmp(&a.1));
    let apps_to_show: Vec<AppEntry> = apps_to_show.into_iter().map(|(a, _)| a).collect();

    // Clamp selected app index
    if !apps_to_show.is_empty() && app.selected_app >= apps_to_show.len() {
        app.selected_app = apps_to_show.len() - 1;
    }

    // Render categories
    let category_names: Vec<String> = app.categories
        .iter()
        .map(|c| format!("{}  {}", crate::icons::category_icon(c), c))
        .collect();

    layout::render_list(
        f,
        categories_area,
        " Categories ",
        &category_names,
        app.selected_category,
        app.focus == Focus::Categories,
        config,
    );

    // Render apps
    let app_names: Vec<String> = apps_to_show.iter().map(|a| a.name.clone()).collect();
    let selected_index_in_apps = if apps_to_show.is_empty() { 0 } else { app.selected_app };

    layout::render_list(
        f,
        apps_area,
        " Apps ",
        &app_names,
        selected_index_in_apps,
        app.focus == Focus::Apps,
        config,
    );
}