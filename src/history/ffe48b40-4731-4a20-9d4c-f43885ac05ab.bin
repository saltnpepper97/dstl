fn update_selection_after_search(app: &mut App) {
    if app.search_query.is_empty() {
        app.selected_category = 0;
        app.selected_app = 0;
        return;
    }

    match app.mode {
        Mode::DualPane => {
            // find first matching app across all categories
            for (cat_idx, cat_name) in app.categories.iter().enumerate() {
                let has_match = app.apps.iter()
                    .any(|a| &a.category == cat_name && app.matches_search(&a.name, &app.search_query).is_some());

                if has_match {
                    app.selected_category = cat_idx;
                    app.selected_app = 0;
                    return;
                }
            }
        }
        Mode::SinglePane => { app.selected_app = 0; }
    }
}